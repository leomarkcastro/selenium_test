[
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "generate_join_link",
        "importPath": "generate_room",
        "description": "generate_room",
        "isExtraImport": true,
        "detail": "generate_room",
        "documentation": {}
    },
    {
        "label": "Process",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "generate_join_link",
        "kind": 2,
        "importPath": "generate_room",
        "description": "generate_room",
        "peekOfCode": "def generate_join_link(\n        roomCode=\"DAF231432S\",\n        roomEnvironment=roomEnvironmentList[\"Japandi\"],\n        roomType=roomTypeList[\"MeetingRoom\"],\n        roomName=\"My personal room\",\n):\n    url = \"https://dev-landvault-be.int2.lv-aws-x3.xyzapps.xyz/api/users/create-shareable-link-auto\"\n    payload = json.dumps({\n        \"roomName\": roomName,\n        \"roomCode\": roomCode,",
        "detail": "generate_room",
        "documentation": {}
    },
    {
        "label": "roomTypeList",
        "kind": 5,
        "importPath": "generate_room",
        "description": "generate_room",
        "peekOfCode": "roomTypeList = {\n    \"MeetingRoom\": \"MeetingRoom\",\n    \"BoardRoom\": \"BoardRoom\",\n    # \"Auditorium\": \"Auditorium\",\n}\nroomEnvironmentList = {\n    \"FuturePop\": \"FuturePop\",\n    \"Japandi\": \"Japandi\",\n    \"Metaverse2033\": \"Metaverse2033\",\n}",
        "detail": "generate_room",
        "documentation": {}
    },
    {
        "label": "roomEnvironmentList",
        "kind": 5,
        "importPath": "generate_room",
        "description": "generate_room",
        "peekOfCode": "roomEnvironmentList = {\n    \"FuturePop\": \"FuturePop\",\n    \"Japandi\": \"Japandi\",\n    \"Metaverse2033\": \"Metaverse2033\",\n}\ndef generate_join_link(\n        roomCode=\"DAF231432S\",\n        roomEnvironment=roomEnvironmentList[\"Japandi\"],\n        roomType=roomTypeList[\"MeetingRoom\"],\n        roomName=\"My personal room\",",
        "detail": "generate_room",
        "documentation": {}
    },
    {
        "label": "test_routine",
        "kind": 2,
        "importPath": "join_test",
        "description": "join_test",
        "peekOfCode": "def test_routine(i, roomCode):\n    print(f\"[{i}] Testing...\")\n    chrome_options = Options()\n    chrome_options.add_experimental_option(\"detach\", True)\n    # set window size to 400 x 300\n    chrome_options.add_argument(\n        f\"window-size={browser_size[0]},{browser_size[1]}\")\n    # set window positiona\n    x = i % browser_row_size * browser_size[0]\n    y = i // browser_row_size * browser_size[1]",
        "detail": "join_test",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "join_test",
        "description": "join_test",
        "peekOfCode": "def test():\n    # create x multi processes of test_routine\n    roomCode = \"test123\"\n    x = instance_count\n    processes = []\n    for i in range(x):\n        processes.append(Process(target=test_routine, args=(i, roomCode)))\n        processes[i].start()\n    # wait for all processes to finish\n    for i in range(x):",
        "detail": "join_test",
        "documentation": {}
    },
    {
        "label": "browser_width",
        "kind": 5,
        "importPath": "join_test",
        "description": "join_test",
        "peekOfCode": "browser_width = 400\nbrowser_aspect_ratio = 3/4  # 4:3\nbrowser_size = (ceil(browser_width), ceil(browser_width*browser_aspect_ratio))\nbrowser_row_size = 3\ninstance_count = 300\ndef test_routine(i, roomCode):\n    print(f\"[{i}] Testing...\")\n    chrome_options = Options()\n    chrome_options.add_experimental_option(\"detach\", True)\n    # set window size to 400 x 300",
        "detail": "join_test",
        "documentation": {}
    },
    {
        "label": "browser_aspect_ratio",
        "kind": 5,
        "importPath": "join_test",
        "description": "join_test",
        "peekOfCode": "browser_aspect_ratio = 3/4  # 4:3\nbrowser_size = (ceil(browser_width), ceil(browser_width*browser_aspect_ratio))\nbrowser_row_size = 3\ninstance_count = 300\ndef test_routine(i, roomCode):\n    print(f\"[{i}] Testing...\")\n    chrome_options = Options()\n    chrome_options.add_experimental_option(\"detach\", True)\n    # set window size to 400 x 300\n    chrome_options.add_argument(",
        "detail": "join_test",
        "documentation": {}
    },
    {
        "label": "browser_size",
        "kind": 5,
        "importPath": "join_test",
        "description": "join_test",
        "peekOfCode": "browser_size = (ceil(browser_width), ceil(browser_width*browser_aspect_ratio))\nbrowser_row_size = 3\ninstance_count = 300\ndef test_routine(i, roomCode):\n    print(f\"[{i}] Testing...\")\n    chrome_options = Options()\n    chrome_options.add_experimental_option(\"detach\", True)\n    # set window size to 400 x 300\n    chrome_options.add_argument(\n        f\"window-size={browser_size[0]},{browser_size[1]}\")",
        "detail": "join_test",
        "documentation": {}
    },
    {
        "label": "browser_row_size",
        "kind": 5,
        "importPath": "join_test",
        "description": "join_test",
        "peekOfCode": "browser_row_size = 3\ninstance_count = 300\ndef test_routine(i, roomCode):\n    print(f\"[{i}] Testing...\")\n    chrome_options = Options()\n    chrome_options.add_experimental_option(\"detach\", True)\n    # set window size to 400 x 300\n    chrome_options.add_argument(\n        f\"window-size={browser_size[0]},{browser_size[1]}\")\n    # set window positiona",
        "detail": "join_test",
        "documentation": {}
    },
    {
        "label": "instance_count",
        "kind": 5,
        "importPath": "join_test",
        "description": "join_test",
        "peekOfCode": "instance_count = 300\ndef test_routine(i, roomCode):\n    print(f\"[{i}] Testing...\")\n    chrome_options = Options()\n    chrome_options.add_experimental_option(\"detach\", True)\n    # set window size to 400 x 300\n    chrome_options.add_argument(\n        f\"window-size={browser_size[0]},{browser_size[1]}\")\n    # set window positiona\n    x = i % browser_row_size * browser_size[0]",
        "detail": "join_test",
        "documentation": {}
    }
]